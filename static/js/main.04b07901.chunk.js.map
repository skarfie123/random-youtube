{"version":3,"sources":["GitHub-Mark.svg","App.js","reportWebVitals.js","index.js"],"names":["cookies","Cookies","API_KEY","url_stem","example_url","App","props","state","url","get","title","channelTitle","thumbnail","link","isLoading","handleUrlChange","bind","handleSubmit","randomise","list","event","this","setState","target","value","a","preventDefault","split","length","alert","channel_list_url","fetch","then","response","json","channel","cui","items","contentDetails","relatedPlaylists","uploads","uploads_list_url","page","concat","nextPageToken","console","log","set","path","number","Math","floor","random","video","snippet","thumbnails","maxres","high","default","resourceId","videoId","className","href","class","src","github","alt","InputGroup","Prepend","Text","id","FormControl","placeholder","defaultValue","aria-label","aria-describedby","onChange","Append","Button","type","variant","disabled","onClick","Card","Img","Body","Title","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04b07901.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/GitHub-Mark.bfdd4b5a.svg\";","import \"./App.css\";\nimport React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Card from \"react-bootstrap/Card\";\nimport github from \"./GitHub-Mark.svg\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\n\nconst API_KEY = \"AIzaSyBIdrDqHEmofVBwnGwkDkKO1NAshKWpGCs\";\nconst url_stem = \"https://www.youtube.com/channel/\";\nconst example_url = url_stem + \"UCqFzWxSCi39LnW1JKFR3efg\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: cookies.get(\"url\") ? cookies.get(\"url\") : example_url,\n      title: \"Threw It On The Ground\",\n      channelTitle: \"thelonelyisland\",\n      thumbnail: \"https://i.ytimg.com/vi/gAYL5H46QnQ/maxresdefault.jpg\",\n      link: \"https://www.youtube.com/watch?v=gAYL5H46QnQ\",\n      isLoading: false,\n    };\n\n    this.handleUrlChange = this.handleUrlChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.randomise = this.randomise.bind(this);\n    this.list = [];\n  }\n\n  handleUrlChange(event) {\n    this.setState({ url: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    this.setState({ isLoading: true });\n    this.list = [];\n    event.preventDefault();\n    var split = this.state.url.split(url_stem);\n    if (split.length !== 2) {\n      alert(\"Please prove a channel url such as: \" + example_url);\n      return;\n    }\n\n    var channel_list_url = `https://youtube.googleapis.com/youtube/v3/channels?part=contentDetails&id=${split[1]}&key=${API_KEY}`;\n    var channel = await fetch(channel_list_url).then((response) =>\n      response.json()\n    );\n\n    // get id of the channel's upload playlist\n    var cui = channel.items[0].contentDetails.relatedPlaylists.uploads;\n\n    // get first page of playlist\n    var uploads_list_url = `https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${cui}&key=${API_KEY}`;\n    var page = await fetch(uploads_list_url).then((response) =>\n      response.json()\n    );\n    this.list = this.list.concat(page.items);\n\n    // get further pages if they exist\n    while (page.nextPageToken) {\n      uploads_list_url = `https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${cui}&key=${API_KEY}&pageToken=${page.nextPageToken}`;\n      page = await fetch(uploads_list_url).then((response) => response.json());\n      this.list = this.list.concat(page.items);\n    }\n    this.setState({ isLoading: false });\n    console.log(`Total Videos: ${this.list.length}`);\n\n    //generate first video\n    this.randomise();\n\n    //save to cookie\n    cookies.set(\"url\", this.state.url, { path: \"/\" });\n  }\n\n  randomise() {\n    if (this.list.length == 0) {\n      alert(\"No videos have been loaded\");\n      return;\n    }\n    var number = Math.floor(Math.random() * this.list.length);\n    console.log(`Random Video: ${number}`);\n    var video = this.list[number];\n\n    var thumbnail;\n    if (video.snippet.thumbnails.maxres) {\n      thumbnail = video.snippet.thumbnails.maxres.url;\n    } else if (video.snippet.thumbnails.high) {\n      thumbnail = video.snippet.thumbnails.high.url;\n    } else {\n      thumbnail = video.snippet.thumbnails.default.url;\n    }\n\n    this.setState({\n      title: video.snippet.title,\n      channelTitle: video.snippet.channelTitle,\n      thumbnail: thumbnail,\n      link: `https://www.youtube.com/watch?v=${video.snippet.resourceId.videoId}`,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>\n          Random YouTube &nbsp;\n          <a href=\"https://github.com/skarfie123/random-youtube\">\n            <img class=\"github\" src={github} alt=\"GitHub Logo\" />\n          </a>\n        </h2>\n        <p>Generate random selections from specified YouTube channels</p>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"url-label\">\n              YouTube Channel URL\n            </InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            placeholder={example_url}\n            defaultValue={this.state.url}\n            aria-label=\"url\"\n            aria-describedby=\"url-label\"\n            onChange={this.handleUrlChange}\n          />\n          <InputGroup.Append>\n            <Button\n              type=\"submit\"\n              variant=\"primary\"\n              disabled={this.state.isLoading}\n              onClick={!this.state.isLoading ? this.handleSubmit : null}\n            >\n              {this.state.isLoading ? \"Loadingâ€¦\" : \"Load\"}\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n\n        <div className=\"row\">\n          <Card className=\"column video\">\n            <Card.Img variant=\"top\" src={this.state.thumbnail} />\n            <Card.Body>\n              <Card.Title>{this.state.title}</Card.Title>\n              <Card.Text>{this.state.channelTitle}</Card.Text>\n              <Button variant=\"primary\" target=\"_blank\" href={this.state.link}>\n                Open\n              </Button>\n            </Card.Body>\n          </Card>\n          <div className=\"column\">\n            <Button variant=\"primary\" onClick={this.randomise}>\n              Next\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}